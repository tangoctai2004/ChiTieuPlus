import SwiftUI
import CoreData

struct ContentView: View {
    @Environment(\.managedObjectContext) private var context

    // --- Dữ liệu mẫu cho Category (Giữ nguyên) ---
    let defaultExpenses: [(name: String, iconName: String)] = [
        ("Ăn uống", "fork.knife"),
        ("Chi tiêu hàng ngày", "cart.fill"),
        ("Quần áo", "tshirt.fill"),
        ("Mỹ phẩm", "hand.raised.fingers.spread.fill"),
        ("Phí tiệc tùng", "party.popper.fill"),
        ("Y tế", "pills.fill"),
        ("Giáo dục", "graduationcap.fill"),
        ("Tiền điện", "bolt.fill"),
        ("Đi lại", "bus.fill"),
        ("Phí liên lạc", "phone.fill"),
        ("Tiền nhà", "house.fill")
    ]
    
    let defaultIncomes: [(name: String, iconName: String)] = [
        ("Tiền lương", "banknote.fill"),
        ("Tiền phụ cấp", "person.3.fill"),
        ("Tiền thưởng", "dollarsign.circle.fill"),
        ("Thu nhập phụ", "lightbulb.fill"),
        ("Đầu tư", "chart.line.uptrend.xyaxis"),
        ("Thu nhập tạm thời", "briefcase.fill")
    ]
    
    // --- Hàm tạo Category mẫu (Giữ nguyên) ---
    func seedDefaultCategoriesIfNeeded(context: NSManagedObjectContext) {
        let fetchRequest: NSFetchRequest<Category> = Category.fetchRequest()
        
        do {
            let existingCount = try context.count(for: fetchRequest)
            guard existingCount == 0 else {
                print("✅ Dữ liệu Category đã tồn tại, không cần seed.")
                return
            }
        } catch {
            print("❌ Lỗi khi kiểm tra Category: \(error)")
            return
        }

        for categoryInfo in defaultExpenses {
            let cat = Category(context: context)
            cat.id = UUID()
            cat.name = categoryInfo.name
            cat.type = "expense" // Loại chi tiêu
            cat.iconName = categoryInfo.iconName
            cat.createAt = Date()
            cat.updateAt = Date()
        }

        for categoryInfo in defaultIncomes {
            let cat = Category(context: context)
            cat.id = UUID()
            cat.name = categoryInfo.name
            cat.type = "income" // Loại thu nhập
            cat.iconName = categoryInfo.iconName
            cat.createAt = Date()
            cat.updateAt = Date()
        }

        do {
            try context.save()
            print("✅ Đã seed thành công các category mặc định.")
        } catch {
            print("❌ Lỗi khi lưu các category mặc định: \(error)")
        }
    }

    // --- HÀM MỚI: Tạo dữ liệu giao dịch mẫu trong 3 năm ---
    func seedSampleTransactionsIfNeeded(context: NSManagedObjectContext) {
        let transactionFetchRequest: NSFetchRequest<Transaction> = Transaction.fetchRequest()
        
        do {
            let existingCount = try context.count(for: transactionFetchRequest)
            guard existingCount == 0 else {
                print("✅ Dữ liệu Transaction đã tồn tại, không cần seed.")
                return
            }
        } catch {
            print("❌ Lỗi khi kiểm tra Transaction: \(error)")
            return
        }

        // 1. Lấy tất cả các Category đã tạo
        let categoryFetchRequest: NSFetchRequest<Category> = Category.fetchRequest()
        guard let allCategories = try? context.fetch(categoryFetchRequest), !allCategories.isEmpty else {
            print("❌ Không tìm thấy Category để tạo Transaction. Hãy đảm bảo seed Category trước.")
            return
        }
        
        let expenseCategories = allCategories.filter { $0.type == "expense" }
        let incomeCategories = allCategories.filter { $0.type == "income" }
        
        guard !expenseCategories.isEmpty, !incomeCategories.isEmpty else {
            print("❌ Thiếu danh mục thu nhập hoặc chi tiêu.")
            return
        }

        let calendar = Calendar.current
        let endDate = Date() // Ngày hôm nay
        guard let startDate = calendar.date(byAdding: .year, value: -3, to: endDate) else {
            print("❌ Không thể tính toán ngày bắt đầu.")
            return
        }

        var currentDate = startDate
        let sampleNotes = ["Cà phê với bạn", "Ăn trưa văn phòng", "Mua sắm Shopee", "Thanh toán hoá đơn điện", "Xem phim cuối tuần", "Đổ xăng", "Đi siêu thị"]

        print("🔄 Bắt đầu seed dữ liệu giao dịch 3 năm...")

        // 2. Lặp qua từng tháng trong 3 năm
        while currentDate <= endDate {
            let currentMonth = calendar.component(.month, from: currentDate)
            let currentYear = calendar.component(.year, from: currentDate)
            
            // --- Tạo 1-3 giao dịch THU NHẬP mỗi tháng ---
            let incomeCount = Int.random(in: 1...3)
            for i in 0..<incomeCount {
                guard let randomCategory = incomeCategories.randomElement() else { continue }
                
                let randomDay = (randomCategory.name == "Tiền lương" && i == 0) ? 5 : Int.random(in: 1...28) // Giả lập ngày nhận lương
                guard let transactionDate = calendar.date(from: DateComponents(year: currentYear, month: currentMonth, day: randomDay)) else { continue }
                
                let amount: Double
                if randomCategory.name == "Tiền lương" && i == 0 {
                    amount = Double.random(in: 15_000_000...30_000_000) // Lương cao hơn
                } else {
                    amount = Double.random(in: 500_000...3_000_000) // Thu nhập phụ
                }

                createTransaction(
                    context: context,
                    category: randomCategory,
                    date: transactionDate,
                    amount: amount,
                    title: randomCategory.name ?? "Thu nhập",
                    note: "Thu nhập tháng \(currentMonth)"
                )
            }
            
            // --- Tạo 15-30 giao dịch CHI TIÊU mỗi tháng ---
            let expenseCount = Int.random(in: 15...30)
            for _ in 0..<expenseCount {
                guard let randomCategory = expenseCategories.randomElement() else { continue }
                
                let randomDay = Int.random(in: 1...28) // Lấy ngày ngẫu nhiên trong tháng (an toàn 28)
                guard let transactionDate = calendar.date(from: DateComponents(year: currentYear, month: currentMonth, day: randomDay)) else { continue }
                
                let amount = Double.random(in: 10_000...1_500_000) // Chi tiêu ngẫu nhiên
                
                createTransaction(
                    context: context,
                    category: randomCategory,
                    date: transactionDate,
                    amount: amount,
                    title: randomCategory.name ?? "Chi tiêu",
                    note: sampleNotes.randomElement() ?? "Chi tiêu lặt vặt"
                )
            }

            // Di chuyển đến tháng tiếp theo
            guard let nextMonth = calendar.date(byAdding: .month, value: 1, to: currentDate) else { break }
            currentDate = nextMonth
        }
        
        // 3. Lưu tất cả thay đổi vào Context
        do {
            try context.save()
            print("✅ Đã seed thành công dữ liệu Transaction trong 3 năm.")
        } catch {
            print("❌ Lỗi khi lưu dữ liệu Transaction: \(error)")
            // Xử lý lỗi, có thể rollback
            context.rollback()
        }
    }
    
    // --- Hàm trợ giúp tạo 1 Transaction ---
    private func createTransaction(context: NSManagedObjectContext, category: Category, date: Date, amount: Double, title: String, note: String?) {
        let newTransaction = Transaction(context: context)
        newTransaction.id = UUID()
        newTransaction.date = date
        newTransaction.createAt = date // Giả lập ngày tạo
        newTransaction.updateAt = date // Giả lập ngày cập nhật
        newTransaction.type = category.type // QUAN TRỌNG: Đồng bộ type
        newTransaction.amount = amount
        newTransaction.title = title
        newTransaction.note = note
        newTransaction.category = category // QUAN TRỌNG: Liên kết với Category
    }

    // --- Giao diện View (Sửa đổi để gọi cả 2 hàm seed) ---
    var body: some View {
        Text("Đang tạo dữ liệu mẫu... Vui lòng kiểm tra Console (Debug Area) trong Xcode.")
            .padding()
            .multilineTextAlignment(.center)
            .onAppear {
                // Chạy các hàm seed khi View xuất hiện
                // Hàm này sẽ tự kiểm tra để không chạy lại nếu dữ liệu đã tồn tại
                
                // 1. Tạo Category trước
                seedDefaultCategoriesIfNeeded(context: context)
                
                // 2. Tạo Transaction (sẽ dùng Category ở bước 1)
                seedSampleTransactionsIfNeeded(context: context)
            }
    }
}
